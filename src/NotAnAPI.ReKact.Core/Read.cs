using System;
using System.IO;
using NotAnAPI.ReKact.Core.Enums;
using TextCopy;

namespace NotAnAPI.ReKact.Core
{
    /// <summary>
    /// Class Read.
    /// </summary>
    /// <autogeneratedoc />
    public static class Read
    {
        /// <summary>
        /// Reads the kact.<para />
        /// Read priority is:
        /// <list type="number">
        /// <item>Arguments</item>
        /// <item>Clipboard</item>
        /// <item>kact.txt File</item>
        /// </list>
        /// </summary>
        /// <param name="args">The arguments.</param>
        /// <returns>(NotAnAPI.ReKact.Core.<see cref="Kact"/> Kact, NotAnAPI.ReKact.Core.Enums.<see cref="ReadableSources"/> Source).</returns>
        public static (Kact Kact, ReadableSources Source) ReadKact(string[] args)
        {
            if (_readFromArgs(args) is { } kactFromArgs) return (kactFromArgs, ReadableSources.Args);
            if (_readFromClipboard() is { } kactFromClipboard) return (kactFromClipboard, ReadableSources.Clipboard);
            if (_readFromFile() is { } kactFromFile) return (kactFromFile, ReadableSources.File);

            return (null, ReadableSources.Unknown);
        }

        /// <summary>
        /// Reads from arguments.
        /// </summary>
        /// <param name="args">The arguments.</param>
        /// <returns>NotAnAPI.ReKact.Core.<see cref="Kact"/>.</returns>
        private static Kact _readFromArgs(string[] args)
        {
            return _tryLinesForKact(args);
        }

        /// <summary>
        /// Reads from clipboard.
        /// </summary>
        /// <returns>NotAnAPI.ReKact.Core.<see cref="Kact"/>.</returns>
        private static Kact _readFromClipboard()
        {
            string clipboardText = ClipboardService.GetText();
            string[] lines = clipboardText?.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);
            return _tryLinesForKact(lines);
        }

        /// <summary>
        /// Reads from file.
        /// </summary>
        /// <returns>NotAnAPI.ReKact.Core.<see cref="Kact"/>.</returns>
        private static Kact _readFromFile()
        {
            string filePath = AppDomain.CurrentDomain.BaseDirectory + @"\kact.txt";
            if (File.Exists(filePath))
            {
                string[] lines = File.ReadAllLines(filePath);
                return _tryLinesForKact(lines);
            }

            return null;
        }

        /// <summary>
        /// Tries the lines for kact.
        /// </summary>
        /// <param name="lines">The lines.</param>
        /// <returns>NotAnAPI.ReKact.Core.<see cref="Kact"/>.</returns>
        private static Kact _tryLinesForKact(string[] lines)
        {
            if (lines == null) return null;
            foreach (string line in lines)
            {
                if (new Kact(line) is {IsValid: true} sa) return sa;
            }

            return null;
        }
    }
}
